///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
  Heat Island Mapping Combined Code

*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
  SD card read/write

   SD card attached to SPI bus as follows:
 ** MOSI - pin 10
 ** MISO - pin 8
 ** CLK - pin 9
 ** CS - pin A1 (for MKRZero SD: SDCARD_SS_PIN)
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
  DHT

  Yellow(data) - Pin 2
  Red 3.3V - VCC
  Black - GND
  10k resisitor that connects power(red) to data(yellow) and is grounded


  REQUIRES the following Arduino libraries:
  - DHT Sensor Library: https://github.com/adafruit/DHT-sensor-library
  - Adafruit Unified Sensor Lib: https://github.com/adafruit/Adafruit_Sensor
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
  GPS

  Power 3.3V - VCC
  GND
  GPS TX to arduino RX
  GPS RX to arduino TX

*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
  Display

  Vin 5V
  GND
  CLK
  MISO - Pin 10
  MOSI - Pin 8
  CS - 7
  D/C - Pin 6
  x+ Pin 5
  x- Pin A3
  Y+ Pin A2
  Y- Pin 4

*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////SD BEGIN////////////

#include <SPI.h>
#include <SD.h>

#define chipSelect A1

bool sdInserted = false;

File dataFile;

//////////SD END/////////////
//////////DHT BEGIN////////////

#include <DHT.h>

#define DHTPIN 2     // Digital pin connected to the DHT sensor

#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321

// Connect pin 1 (on the left) of the sensor to +5V
// NOTE: If using a board with 3.3V logic like an Arduino Due connect pin 1
// to 3.3V instead of 5V!
// Connect pin 2 of the sensor to whatever your DHTPIN is
// Connect pin 4 (on the right) of the sensor to GROUND
// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor

// Initialize DHT sensor.
// Note that older versions of this library took an optional third parameter to
// tweak the timings for faster processors.  This parameter is no longer needed
// as the current DHT reading algorithm adjusts itself to work on faster procs.
DHT dht(DHTPIN, DHTTYPE);

//////////DHT END/////////////
//////////GPS BEGIN/////////////

#include <Adafruit_GPS.h>

// what's the name of the hardware serial port?
#define GPSSerial Serial1

// Connect to the GPS on the hardware port
Adafruit_GPS GPS(&GPSSerial);

// Set GPSECHO to 'false' to turn off echoing the GPS data to the Serial console
// Set to 'true' if you want to debug and listen to the raw GPS sentences
#define GPSECHO false

uint32_t timer = millis();
int minute;
int day;
float second;
int hour;
int month;
int year;

String Date;
String Time;
String meridianStatus;

//////////GPS END//////////////
//////////DISPLAY BEGIN/////////////

//headers for the display graphics
#include "SPI.h"
#include "Adafruit_GFX.h"
#include "Adafruit_ILI9341.h"

//headers for the touchscreen
#include <stdint.h>
#include "TouchScreen.h"

#define BLACK    0x0000
#define BLUE     0x001F
#define RED      0xF800
#define GREEN    0x07E0
#define CYAN     0x07FF
#define MAGENTA  0xF81F
#define YELLOW   0xFFE0
#define WHITE    0xFFFF

//pins for the MKR Wifi 1010
#define TFT_DC 6
#define TFT_CS 7
#define TFT_MOSI 8
#define TFT_CLK 9
#define TFT_MISO 10

//pins for the touchscreen
#define YP A2  // must be an analog pin, use "An" notation!
#define XM A3  // must be an analog pin, use "An" notation!
#define YM 4   // can be a digital pin
#define XP 5   // can be a digital pin

Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_MOSI, TFT_CLK, A0, TFT_MISO);

// For better pressure precision, we need to know the resistance
// between X+ and X- Use any multimeter to read it
// For the one we're using, its 300 ohms across the X plate (?)
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);

//size of menu boxes
#define BOXSIZE 50

//int to keep track of where menu is at
//0 = starting menu, 1 = mapping, 2 = cloud
int menuSelect = 0;
int mo;
int vo;
int battPin = A0;

bool displayWiFiConnected = false;

//////////DISPLAY END/////////////
//////////WIFI BEGIN/////////////

#include <WiFiNINA.h>
#include <ArduinoECCX08.h>

const char WEBSITE[] = "api.pushingbox.com";  //pushingbox API server
const String devid = "vFD86960FD30E512";  //device ID on Pushingbox for our Scenario

const char* MY_SSID = "Hotspot";
const char* MY_PWD =  "12345678";

int status = WL_IDLE_STATUS;

bool Connected = false;
int latestUploadedLine = -1;

//////////WIFI END//////////////

float Temperature = 0.0;
float Humidity = 0.0;
float Longitude = 0.0;
float Latitude = 0.0;

void setup() {
  Serial.begin(115200);
  //while(!Serial);

  if (!ECCX08.begin()) {
    Serial.println("No ECCX08 present!");
    while (1);
  }

  SPI.begin();

  ///////////////////////////////////////// SET UP SD BEGIN ////////////////////////////////////////////////////////////////////////////////////
  Serial.println("\nSET UP SD BEGIN");
  Serial.print("Initializing SD card...");

  pinMode(chipSelect, OUTPUT);
  digitalWrite(chipSelect, LOW);///////////////////////////////////needs testing///////////////////////

  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
    sdInserted = false;
  }
  else {
    Serial.println("card initialized.");
    sdInserted = true;

    String labels = "";
    if(SD.exists("datalog.csv")) {
      Serial.println("Test opening datalog.csv ...");
      dataFile = SD.open("datalog.csv", FILE_WRITE);
      dataFile.close();
    } else {
      Serial.println("Creating file ...");
      dataFile = SD.open("datalog.csv", FILE_WRITE);

      labels += "Date";
      labels += ",";
      labels += "Time";
      labels += ",";
      labels += "Temperature";
      labels += ",";
      labels += "Humidity";
      labels += ",";
      labels += "Longitude";
      labels += ",";
      labels += "Latitude";

      dataFile.println(labels);
      dataFile.close();
    }
  }

  //File dataFile;
  
  digitalWrite(chipSelect, HIGH);
  Serial.println("\nSET UP SD END");
  ///////////////////////////////////////// SET UP SD END ////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////// SET UP DHT BEGIN ////////////////////////////////////////////////////////////////////////////////////
  // put your setup code here, to run once:
  Serial.println("\nSET UP DHT BEGIN");
  Serial.println(F("DHTxx test!"));

  dht.begin();
  Serial.println("\nSET UP DHT END");
  ///////////////////////////////////////// SET UP DHT END ////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////// SET UP GPS BEGIN ////////////////////////////////////////////////////////////////////////////////////
  Serial.println("\nSET UP GPS BEGIN");
  // connect at 115200 so we can read the GPS fast enough and echo without dropping chars
  // also spit it out
  //Serial.begin(115200);
  Serial.println("Adafruit GPS library basic test!");

  // 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
  GPS.begin(9600);
  // uncomment this line to turn on RMC (recommended minimum) and GGA (fix data) including altitude
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  // uncomment this line to turn on only the "minimum recommended" data
  //GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
  // For parsing data, we don't suggest using anything but either RMC only or RMC+GGA since
  // the parser doesn't care about other sentences at this time
  // Set the update rate
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
  // For the parsing code to work nicely and have time to sort thru the data, and
  // print it out we don't suggest using anything higher than 1 Hz

  // Request updates on antenna status, comment out to keep quiet
  GPS.sendCommand(PGCMD_ANTENNA);

  delay(1000);

  // Ask for firmware version
  GPSSerial.println(PMTK_Q_RELEASE);
  Serial.println("\nSET UP GPS END");
  ///////////////////////////////////////// SET UP GPS END ////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////// SET UP DISPLAY BEGIN ////////////////////////////////////////////////////////////////////////////////////

  Serial.println("\nSET UP DISPLAY BEGIN");

  pinMode(TFT_CS, OUTPUT);
  digitalWrite(TFT_CS, HIGH);


  tft.begin();
  pinMode(battPin, INPUT); /////testing////////
  
  tft.fillScreen(BLUE);
  tft.setTextWrap(false);

  tft.setCursor(0, 0); //set cursor at x = 0, y = 0
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.println("Hello Sr Design!");

  delay(1000);

  tft.setCursor(0, 0);
  tft.fillScreen(BLUE);
  tft.setTextWrap(false);

  //Prints out space for temp, humidity and power
  tft.setCursor(0, 0);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("\n\nTemp: ");
  tft.print(" F\n\n");
  tft.print("Humidity: ");
  tft.print(" %\n\n");
  tft.print("Power: ");
  //insert power code here
  tft.print("%");

  //drawing menu options
  tft.fillRect(10, 140, BOXSIZE * 2, BOXSIZE, CYAN); //draws rectangle (x,y,width,height,color)
  tft.setCursor(20, 150);
  tft.setTextColor(WHITE, CYAN);
  tft.setTextSize(2);
  tft.println("Mapping");

  tft.fillRect(10, 200, BOXSIZE * 2, BOXSIZE, CYAN); //draws rectangle (x,y,width,height,color)
  tft.setCursor(20, 210);
  tft.setTextColor(WHITE, CYAN);
  tft.setTextSize(2);
  tft.println("Cloud");
  tft.setCursor(20, 227);
  tft.setTextColor(WHITE, CYAN);
  tft.setTextSize(2);
  tft.println("Storage");

  digitalWrite(TFT_CS, LOW);
  Serial.println("\nSET UP DISPLAY END");

  ///////////////////////////////////////// SET UP DISPLAY END ////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////// SET UP WIFI BEGIN ////////////////////////////////////////////////////////////////////////////////////
  Serial.println("\nSET UP WIFI BEGIN");
  Serial.print("Attempting to connect to SSID: ");
  Serial.println(MY_SSID);

  status = WiFi.status();

  if (status != WL_CONNECTED) {
    WiFi.begin(MY_SSID, MY_PWD);

    delay(1000);
  }

  status = WiFi.status();

  if (status == WL_CONNECTED) {
    Serial.println();
    Serial.println("Connected to wifi");
    printWifiStatus();

    Connected = true;
  }
  else {
    Serial.println();
    Serial.println("Unable to connect to wifi");
  }

  Serial.println("\nSET UP WIFI END");
  ///////////////////////////////////////// SET UP WIFI END ////////////////////////////////////////////////////////////////////////////////////
  
  //Wait 30s to find a fix as an intial boot up.
  //delay(30000);
  
} //End of Setup  ****************************************************************************************************

void loop() {
  int delayTimer = 60000;

  /////////////////////////////////////////  LOOP GPS BEGIN ////////////////////////////////////////////////////////////////////////////////////
  Serial.println("\nLOOP GPS BEGIN");
  
  meridianStatus = "";
  Date = "";
  Time = "";
  // put your main code here, to run repeatedly:
 // read data from the GPS in the 'main loop'
  char c = GPS.read();

  float coordInt = 0.0;
  float coordDec = 0.0;

 
  while (!GPS.newNMEAreceived()){
    c=GPS.read();
  }
  // if you want to debug, this is a good time to do it!
  if (GPSECHO)
    if (c) Serial.print(c);
  // if a sentence is received, we can check the checksum, parse it...
  if (GPS.newNMEAreceived()) {
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trying to print out data
    Serial.println(GPS.lastNMEA()); // this also sets the newNMEAreceived() flag to false
    if (!GPS.parse(GPS.lastNMEA())) // this also sets the newNMEAreceived() flag to false
      return; // we can fail to parse a sentence in which case we should just wait for another
  }

  // approximately every 2 seconds or so, print out the current stats
  if (millis() - timer > 2000) {
    timer = millis(); // reset the timer
    //Serial.print("\nTime: ");
    
   /* if (GPS.hour < 10) { Serial.print('0'); }
    Serial.print(GPS.hour, DEC); Serial.print(':');
    if (GPS.minute < 10) { Serial.print('0'); }
    Serial.print(GPS.minute, DEC); Serial.print(':');
    if (GPS.seconds < 10) { Serial.print('0'); }
    Serial.print(GPS.seconds, DEC); Serial.print('.');
    if (GPS.milliseconds < 10) {
      Serial.print("00");
    } else if (GPS.milliseconds > 9 && GPS.milliseconds < 100) {
      Serial.print("0");
    }
    Serial.println(GPS.milliseconds);
    Serial.print("Date: ");
    Serial.print(GPS.day, DEC); Serial.print('/');
    Serial.print(GPS.month, DEC); Serial.print("/20");
    Serial.println(GPS.year, DEC);*/
    
    second = GPS.seconds;
    minute = GPS.minute;

    if(GPS.hour > 5) {
      hour = GPS.hour - 5;
    }
    else {
      hour = GPS.hour - 5 + 24;
    }
    
    day = GPS.day;
    year = GPS.year + 2000;
    month = GPS.month;
    
    if (hour > 12) {
      hour -= 12;
      meridianStatus = "PM";
    } else {
      meridianStatus = "AM";
    }

    Time = String(hour) + ":";
    
    if(minute < 10) {
      Time += "0" + String(minute) + ":";
    } else {
      Time += String(minute) + ":";
    }
    
    if(second < 10) {
      Time += "0" + String(second) + " " + meridianStatus;
    }
    else {
      Time += String(second) + " " + meridianStatus;
    }
      
    Date = String(month) + "-";
    
    if(day < 10) {
      Date += "0" + String(day) + "-";
    }
    else {
      Date += String(day) + "-";
    }
    
    Date += String(year);

    coordInt = float(int(GPS.longitude / 100));
    coordDec = (GPS.longitude - coordInt * 100) / 60;
    Longitude = coordInt + coordDec;
    
    if(GPS.lon == 'W') {
      Longitude = Longitude * (-1);
    }

    coordInt = float(int(GPS.latitude / 100));
    coordDec = (GPS.latitude - coordInt * 100) / 60;
    Latitude = coordInt + coordDec;
    
    if (GPS.lat == 'S') {
      Latitude = Latitude * (-1);
    }
    
    if (isnan(Latitude) || isnan(Longitude)) {              //This is to prevent the code from continuing without a fix
      Serial.println(F("GPS does not have a fix!"));
      return;
    }

    Serial.println("\n==========================================================================================================");
    // ISO Standard Date Format, with leading zeros https://xkcd.com/1179/
    Serial.print("Date: " + Date);

    Serial.print("   Time: " + Time);
    Serial.print(" Fix: "); Serial.print((int)GPS.fix);
    Serial.print(" quality: "); Serial.println((int)GPS.fixquality);
    if (GPS.fix) {
      Serial.print("Location: ");
      Serial.print(Latitude, 7); Serial.print(GPS.lat);
      Serial.print(", ");
      Serial.print(Longitude, 7); Serial.println(GPS.lon);
      Serial.print("Satellites: "); Serial.println((int)GPS.satellites);
    }
    
    Serial.println("==========================================================================================================");
    /*if (!GPS.fix){
      Serial.print ("whoops");
    }*/
  }
  Serial.println("\nLOOP GPS END");
  /////////////////////////////////////////  LOOP GPS END ////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////  LOOP DHT BEGIN ////////////////////////////////////////////////////////////////////////////////////
  Serial.println("\nLOOP DHT BEGIN");
  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float Humidity = dht.readHumidity();
  // Read temperature as Celsius (the default)
  //float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float Temperature = dht.readTemperature(true);

  // Check if any reads failed and exit early (to try again).
  if (isnan(Humidity) || isnan(Temperature)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  Serial.print(F("Humidity: "));
  Serial.print(Humidity);
  Serial.print(F("%  Temperature: "));
  Serial.print(Temperature);
  Serial.print(F("°F  Latitude: "));
  Serial.print(String(Latitude,7));
  Serial.print(F("  Longitude: "));
  Serial.print(String(Longitude,7));
  //Serial.print(F("°F  Heat index: "));
  //Serial.print(hic);
  //Serial.print(F("°C "));
  //Serial.print(hif);
  //Serial.println(F("°F"));
  
  Serial.println("\nLOOP DHT END");
  ///////////////////////////////////////// LOOP DHT BEGIN ////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////// LOOP DISPLAY BEGIN ////////////////////////////////////////////////////////////////////////////////////
  Serial.println("\nLOOP DISPLAY BEGIN");
  pinMode(TFT_CS, OUTPUT);
  SPI.setDataMode(SPI_MODE3);

  //tft.begin();
  
  digitalWrite(TFT_CS, HIGH);

  tft.begin();
  
  TSPoint p = ts.getPoint();
  int voltReading = analogRead(battPin);
  int volts = map(voltReading, 0, 1023, 0, 100);
  /*
  if (menuSelect == 0)
  {/*
    if (mo != minute) {
      tft.fillRect(55, 0, BOXSIZE * 2, 25, BLUE);
      mo = minute;
    }
    tft.fillRect(70, 15, BOXSIZE * 3, 30, BLUE);
    tft.fillRect(100, 57, BOXSIZE * 2, 30, BLUE);
    if (vo != volts) {
      tft.fillRect(73,80, BOXSIZE * 2, 30, BLUE);
      vo = volts;
    }*//*
    tft.setCursor(0, 0);
    tft.fillScreen(BLUE);
    tft.setTextWrap(false);
    //T:
    //H:
    tft.setCursor(85, 0);
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.print(hour);
    if(minute < 10){
      tft.print(":0"); tft.print(minute);
    }
    else{
      tft.print(":"); tft.print(minute);
    }
    tft.print("\n\nTemp: ");
    tft.print(Temperature); tft.print(" ");
    tft.print("F\n\n");
    tft.print("Humidity: ");
    tft.print(Humidity);
    tft.print(" %\n\n");
    tft.print("Power: "); tft.print(volts);
    tft.print("%\n");

    //drawing menu options
    tft.fillRect(10, 140, BOXSIZE * 2, BOXSIZE, CYAN); //draws rectangle (x,y,width,height,color)
    tft.setCursor(20, 150);
    tft.setTextColor(WHITE, CYAN);
    tft.setTextSize(2);
    tft.println("Mapping");

    tft.fillRect(10, 200, BOXSIZE * 2, BOXSIZE, CYAN); //draws rectangle (x,y,width,height,color)
    tft.setCursor(20, 210);
    tft.setTextColor(WHITE, CYAN);
    tft.setTextSize(2);
    tft.println("Cloud");
    tft.setCursor(20, 227);
    tft.setTextColor(WHITE, CYAN);
    tft.setTextSize(2);
    tft.println("Storage");

    //prints location
    //tft.print(String(Latitude,3)); tft.print(", "); tft.print(String(Longitude,3));

     // see if the card is present and can be initialized: /////////////////////needs testing////////////
    if (!sdInserted) {
      tft.setCursor(125, 150);
      tft.setTextColor(WHITE, RED);
      tft.setTextSize(2);
      tft.println("ERROR: SD");
      tft.setCursor(150, 170);
      tft.setTextColor(WHITE, RED);
      tft.setTextSize(2);
      tft.println("CARD");
    }

    status = WiFi.status();

  if (status != WL_CONNECTED) {
      tft.setCursor(50, 260);
      tft.setTextColor(WHITE, RED);
      tft.setTextSize(2);
      tft.println("ERROR: WIFI");
      tft.setCursor(40, 280);
      tft.setTextColor(WHITE, RED);
      tft.setTextSize(2);
      tft.println("NOT CONNECTED");

    WiFi.begin(MY_SSID, MY_PWD);
  }
  }

  // we have some minimum pressure we consider 'valid'
  // pressure of 0 means no pressing!
  //logic for pushing Mapping button
  if (p.z > ts.pressureThreshhold && p.x < 550 && p.x > 370 && p.y < 600 && p.y > 500 && menuSelect == 0) {
*/
    menuSelect = 1; //shows we are in one of the URL menus

    tft.setCursor(0, 0);
    tft.fillScreen(BLUE);
    tft.setTextWrap(false);

    tft.setCursor(0, 0);
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.println("To access the Map\n");
    tft.println("Use this URL code \nin your web browser: \n");
    tft.println("[insert URL]"); //need the URL

    //back button
    tft.fillRect(110, 240, BOXSIZE * 2, BOXSIZE, CYAN);
    tft.setCursor(130, 255); //should be lower right
    tft.setTextColor(WHITE, CYAN);
    tft.println("Back");/*
  }


  //logic for Cloud Storage
  if (p.z > ts.pressureThreshhold && p.x < 550 && p.x > 370 && p.y < 700 && p.y > 600 && menuSelect == 0) {

    menuSelect = 1;

    tft.setCursor(0, 0);
    tft.fillScreen(BLUE);
    tft.setTextWrap(false);

    tft.setCursor(0, 0);
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.println("Cloud Storage Access\n");
    tft.println("Go to Google Sheets \nusing: \n");
    tft.println("docs.google.com/\nspreadsheets/"); 
    tft.println("\nLog in using a gmail\n account. \n");
    tft.println("Click on Datalog");

    //back button
    tft.fillRect(110, 240, BOXSIZE * 2, BOXSIZE, CYAN);
    tft.setCursor(130, 255); //should be lower right
    tft.setTextColor(WHITE, CYAN);
    tft.println("Back");
  }

  //logic for pushing the back button
  if (p.z > ts.pressureThreshhold && p.x < 720 && p.x > 580 && p.y < 700 && p.y > 600 && menuSelect == 1)
  {
    
    menuSelect = 0;
    tft.setCursor(0, 0);
    tft.fillScreen(BLUE);
    tft.setTextWrap(false);

    //T:
    //H:
    tft.setCursor(85, 0);
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.print(hour); tft.print(":"); tft.print(minute);
    tft.print("\n\nTemp: ");
    tft.print(Temperature); tft.print(" "); //tft.print((char)248);
    tft.print("F\n\n");
    tft.print("Humidity: ");
    tft.print(Humidity);
    tft.print(" %\n\n");
    tft.print("Power: ");
    //insert power code here
    tft.print("%\n\n");
    tft.print(GPS.latitude); tft.print(", "); tft.print(GPS.longitude); //prints location

    //drawing menu options
    tft.fillRect(10, 140, BOXSIZE * 2, BOXSIZE, CYAN); //draws rectangle (x,y,width,height,color)
    tft.setCursor(20, 150);
    tft.setTextColor(WHITE, CYAN);
    tft.setTextSize(2);
    tft.println("Mapping");

    tft.fillRect(10, 200, BOXSIZE * 2, BOXSIZE, CYAN); //draws rectangle (x,y,width,height,color)
    tft.setCursor(20, 210);
    tft.setTextColor(WHITE, CYAN);
    tft.setTextSize(2);
    tft.println("Cloud");
    tft.setCursor(20, 227);
    tft.setTextColor(WHITE, CYAN);
    tft.setTextSize(2);
    tft.println("Storage");
  }
*/
  Serial.println("\nLOOP DISPLAY END");
  digitalWrite(TFT_CS, LOW);

  ///////////////////////////////////////// LOOP DISPLAY END ////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////// LOOP SD BEGIN ////////////////////////////////////////////////////////////////////////////////////
  Serial.println("\nLOOP SD BEGIN");

  pinMode(chipSelect, OUTPUT);
  SPI.setDataMode(SPI_MODE0); 

  digitalWrite(chipSelect, LOW);

  String dataString = "";

  //SD.begin();
  if (!SD.begin(chipSelect)) {                                                        //SD.begin fails, card not inserted
    Serial.println("Card failed, or not present");
    sdInserted = false;
    delay(30000);
    return;
  } else {    //SD.begin works, card inserted
    if(sdInserted == false) {                                                       //means in a previous iteration the card was not inserted but it is now
      sdInserted = true;

      if(SD.exists("datalog.csv")) {                                                       //checking for file
        // make a string for assembling the data to log:
        dataString = "";

        dataString += String(Date);
        dataString += ",";
        dataString += String(Time);
        dataString += ",";
        dataString += String(Temperature,1);
        dataString += ",";
        dataString += String(Humidity,1);
        dataString += ",";
        dataString += String(Longitude, 7); //Saves the longitdue value
        dataString += ",";
        dataString += String(Latitude, 7);
  
        // open the file. note that only one file can be open at a time,
        // so you have to close this one before opening another.

        dataFile = SD.open("datalog.csv", FILE_WRITE);

        // if the file is available, write to it:
        if (dataFile) {
          dataFile.println(dataString);
          dataFile.close();
          // print to the serial port too:
        }
        // if the file isn't open, pop up an error:
        else {
          Serial.println("error opening datalog.csv in sd loop in if(SD.exists())");
        }

        dataFile.close();
      } else {                                                                      //if file doesnt exists, create it
        Serial.println("Creating file ...");
        dataFile = SD.open("datalog.csv", FILE_WRITE);
        
        String labels = "";
        
        labels += "Date";
        labels += ",";
        labels += "Time";
        labels += ",";
        labels += "Temperature";
        labels += ",";
        labels += "Humidity";
        labels += ",";
        labels += "Longitude";
        labels += ",";
        labels += "Latitude";

        dataFile.println(labels);

        dataString = "";

        dataString += String(Date);
        dataString += ",";
        dataString += String(Time);
        dataString += ",";
        dataString += String(Temperature,1);
        dataString += ",";
        dataString += String(Humidity,1);
        dataString += ",";
        dataString += String(Longitude, 7); //Saves the longitdue value
        dataString += ",";
        dataString += String(Latitude, 7);

        dataFile.println(dataString);

        dataFile.close();
      }
    }
    else {                                                                                 //sdInserter == true, means in a previous iteration the card was inserted
      // make a string for assembling the data to log:                                     //write to sd like normal
      dataString = "";

      dataString += String(Date);
      dataString += ",";
      dataString += String(Time);
      dataString += ",";
      dataString += String(Temperature,1);
      dataString += ",";
      dataString += String(Humidity,1);
      dataString += ",";
      dataString += String(Longitude, 7); //Saves the longitdue value
      dataString += ",";
      dataString += String(Latitude, 7);
  

      // open the file. note that only one file can be open at a time,
      // so you have to close this one before opening another.

      dataFile = SD.open("datalog.csv", FILE_WRITE);

      // if the file is available, write to it:
      if (dataFile) {
        dataFile.println(dataString);
        dataFile.close();
        // print to the serial port too:
      }
      // if the file isn't open, pop up an error:
      else {
        Serial.println("error opening datalog.csv in sd loop in sdInserter == true");
      }
    }
  }
  
  digitalWrite(chipSelect, HIGH); /////////////////////////needs testing/////////////

  SD.end();

  Serial.println("\nLOOP SD END");
  ///////////////////////////////////////// LOOP SD END ////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////// LOOP WIFI BEGIN ////////////////////////////////////////////////////////////////////////////////////
  Serial.println("\nLOOP WIFI BEGIN");
/*
  WiFiClient client;  //Instantiate WiFi object

  int fileLine = 0;
  char nextChar;
  String lineBuffer = "";

  status = WiFi.status();

  if (status == WL_CONNECTED) {
    Serial.println("WL_CONNECTED");
  } else if (status == WL_AP_CONNECTED) {
    Serial.println("WL_AP_CONNECTED");
  } else if (status == WL_AP_LISTENING) {
    Serial.println("WL_AP_LISTENING");
  } else if (status == WL_NO_SHIELD) {
    Serial.println("WL_NO_SHIELD");
  } else if (status == WL_NO_MODULE) {
    Serial.println("WL_NO_MODULE");
  } else if (status == WL_IDLE_STATUS) {
    Serial.println("WL_IDLE_STATUS");
  } else if (status == WL_NO_SSID_AVAIL) {
    Serial.println("WL_NO_SSID_AVAIL");
  } else if (status == WL_SCAN_COMPLETED) {
    Serial.println("WL_SCAN_COMPLETED");
  } else if (status == WL_CONNECT_FAILED) {
    Serial.println("WL_CONNECT_FAILED");
  } else if (status == WL_CONNECTION_LOST) {
    Serial.println("WL_CONNECTION_LOST");
  } else if (status == WL_DISCONNECTED) {
    Serial.println("WL_DISCONNECTED");
  } else {
    Serial.println("ERROR WIFI STATUS");
  }

  if (status != WL_CONNECTED && Connected) {
    Serial.println("You have disconnected from the WiFi!");
    Connected = false;
    WiFi.begin(MY_SSID, MY_PWD);
  }
  else if (status == WL_CONNECTED && !Connected) {
    Serial.println();
    Serial.println("Connected to wifi");
    printWifiStatus();

    Connected = true;
  }

  if(status == WL_CONNECTED) {
    //SD.begin();
    Serial.println("before dataFile");
    dataFile = SD.open("datalog.csv");
    Serial.println("after dataFile");
    if(dataFile) {
      Serial.println("File opened in wifi.");
      if(client.connect(WEBSITE,80)) {
        for(int i = 0; i < 6; i++) {
          if(!dataFile.available()) {
            Serial.println("All data in the file has been uploaded.");
            break;
          }

          while(dataFile.available()) {
            nextChar = dataFile.read();

            if(fileLine > latestUploadedLine) {
              lineBuffer += nextChar;
  
              if(nextChar == '\n') {
                latestUploadedLine++;
                fileLine++;
    
                int firstComma = lineBuffer.indexOf(',');
                int secondComma = lineBuffer.indexOf(',', firstComma + 1);
                int thirdComma = lineBuffer.indexOf(',', secondComma + 1);
                int fouthComma = lineBuffer.indexOf(',', thirdComma + 1);
                int fifthComma = lineBuffer.indexOf(',', fouthComma + 1);
  
                String parsedDate = lineBuffer.substring(0, firstComma);
                String parsedTime = lineBuffer.substring(firstComma + 1, secondComma);
                String parsedTemperature = lineBuffer.substring(secondComma + 1, thirdComma);
                String parsedHumidity = lineBuffer.substring(thirdComma + 1, fouthComma);
                String parsedLongitude = lineBuffer.substring(fouthComma + 1, fifthComma);
                String parsedLatitude = lineBuffer.substring(fifthComma + 1);

                client.print("GET /pushingbox?devid=" + devid
                              + "&Date=" + parsedDate
                              + "&Time=" + parsedTime
                              + "&Temperature=" + parsedTemperature
                              + "&Humidity=" + parsedHumidity
                              + "&Longitude=" + parsedLongitude
                              + "&Latitude=" + parsedLatitude);
                //Serial.println("connection made");
                // HTTP 1.1 provides a persistent connection, allowing batched requests
                // or pipelined to an output buffer
                client.println(" HTTP/1.1");
                client.print("Host: ");
                client.println(WEBSITE);
                client.println("User-Agent: MKR1010");
                client.println();

                delayTimer -= 10000;

                delay(10000);
                break;
              }
            }
            if(nextChar == '\n') {
              fileLine++;
            }
          }
          lineBuffer = "";
        }
      }
      dataFile.close();
    }
    else {
      Serial.println("error opening datalog.csv in wifi");
    }
    //SD.end();
  }
  else {
    Serial.println("You are not connected to the internet.");
    WiFi.begin(MY_SSID, MY_PWD);
  }

  SD.end();
*/
  Serial.println("\nLOOP WIFI END");
  ///////////////////////////////////////// LOOP WIFI END ////////////////////////////////////////////////////////////////////////////////////
  /*
  if(delayTimer > 0) {
    delay(delayTimer);
  }
  else {
    return;
  }
  */
  delay(30000);
} //End of Loop ****************************************************************************************************


///////////////////////////////////////// WIFI BEGIN ////////////////////////////////////////////////////////////////////////////////////

void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
  Serial.println();
}

///////////////////////////////////////// WIFI END ////////////////////////////////////////////////////////////////////////////////////
